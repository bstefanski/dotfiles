<application>
  <component name="LanguageInjectionConfiguration">
    <option name="INSTRUMENTATION" value="ASSERT" />
    <option name="LANGUAGE_ANNOTATION" value="org.intellij.lang.annotations.Language" />
    <option name="PATTERN_ANNOTATION" value="org.intellij.lang.annotations.Pattern" />
    <option name="SUBST_ANNOTATION" value="org.intellij.lang.annotations.Subst" />
    <option name="RESOLVE_REFERENCES" value="true" />
    <injection language="SQL" injector-id="groovy">
      <display-name>groovy.sql.Sql</display-name>
      <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("eachRow").definedInClass("groovy.sql.Sql"))]]></place>
      <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("execute").definedInClass("groovy.sql.Sql"))]]></place>
      <place disabled="true"><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeInsert").definedInClass("groovy.sql.Sql"))]]></place>
      <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("executeUpdate").definedInClass("groovy.sql.Sql"))]]></place>
      <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("firstRow").definedInClass("groovy.sql.Sql"))]]></place>
      <place><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("query").definedInClass("groovy.sql.Sql"))]]></place>
      <place disabled="true"><![CDATA[groovyElement().methodCallParameter(0, psiMethod().withName("rows").definedInClass("groovy.sql.Sql"))]]></place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Connection (java.sql)</display-name>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("nativeSQL").withParameters("java.lang.String").definedInClass("java.sql.Connection"))]]></place>
      <place disabled="true"><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareCall").withParameters("java.lang.String").definedInClass("java.sql.Connection"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareCall").withParameters("java.lang.String", "int", "int").definedInClass("java.sql.Connection"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareCall").withParameters("java.lang.String", "int", "int", "int").definedInClass("java.sql.Connection"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String").definedInClass("java.sql.Connection"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "int").definedInClass("java.sql.Connection"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "int", "int").definedInClass("java.sql.Connection"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "int", "int", "int").definedInClass("java.sql.Connection"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "int[]").definedInClass("java.sql.Connection"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("prepareStatement").withParameters("java.lang.String", "java.lang.String[]").definedInClass("java.sql.Connection"))]]></place>
    </injection>
    <injection language="RegExp" injector-id="java">
      <display-name>Splitter.onPattern (com.google.common.base)</display-name>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("onPattern").withParameters("java.lang.String").definedInClass("com.google.common.base.Splitter"))]]></place>
    </injection>
    <injection language="OracleSqlPlus" injector-id="java">
      <display-name>Sql.rows (groovy.sql)</display-name>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("rows").withParameters("java.lang.String").definedInClass("groovy.sql.Sql"))]]></place>
    </injection>
    <injection language="HSQLDB" injector-id="java">
      <display-name>XmlUtils.logXmlMessageInDebug (com.in4mates.cpi.utils)</display-name>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("logXmlMessageInDebug").withParameters("java.lang.Object", "java.lang.String").definedInClass("com.in4mates.cpi.utils.XmlUtils"))]]></place>
    </injection>
    <injection language="RegExp" injector-id="xml">
      <display-name>AD/@id</display-name>
      <place><![CDATA[xmlAttribute().withLocalName(string().equalTo("id")).withParent(xmlTag().withLocalName(string().equalTo("AD")))]]></place>
    </injection>
    <injection language="XML" injector-id="xml">
      <display-name>cancelDebitResponse/@version</display-name>
      <place><![CDATA[xmlAttribute().withLocalName(string().equalTo("version")).withParent(xmlTag().withLocalName(string().equalTo("cancelDebitResponse")).withNamespace(string().equalTo("http://playmobile.pl/adapter/response/ccbs/charge")))]]></place>
    </injection>
  </component>
</application>